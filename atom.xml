<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhoujingpiao.github.io</id>
    <title>暮雨今汐</title>
    <updated>2019-07-06T10:25:21.012Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhoujingpiao.github.io"/>
    <link rel="self" href="https://zhoujingpiao.github.io/atom.xml"/>
    <subtitle>说什么王权富贵 / 怕什么戒律清规</subtitle>
    <logo>https://zhoujingpiao.github.io/images/avatar.png</logo>
    <icon>https://zhoujingpiao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 暮雨今汐</rights>
    <entry>
        <title type="html"><![CDATA[SourceTree生成SSH密钥(拉取GitLab代码)]]></title>
        <id>https://zhoujingpiao.github.io/post/sourcetree-sheng-cheng-ssh-mi-yao-la-qu-gitlab-dai-ma</id>
        <link href="https://zhoujingpiao.github.io/post/sourcetree-sheng-cheng-ssh-mi-yao-la-qu-gitlab-dai-ma">
        </link>
        <updated>2017-12-27T02:06:56.000Z</updated>
        <summary type="html"><![CDATA[<p>SourceTree是一款第三方可视化的Git客户端。</p>
<p>安全,好用,免密码,逼格高。</p>
]]></summary>
        <content type="html"><![CDATA[<p>SourceTree是一款第三方可视化的Git客户端。</p>
<p>安全,好用,免密码,逼格高。</p>
<!-- more -->
<h3 id="1为什么">1.为什么</h3>
<p>安全,好用,免密码,逼格高</p>
<h3 id="2流程">2.流程</h3>
<ul>
<li>
<p>1.安装Git客户端,安装SourceTree客户端,我的版本分别为:Git:2.9.3,SourceTree2.3.5,注意安装最好不要带有中文路径</p>
</li>
<li>
<p>2.SourceTree客户端,点击菜单栏工具-创建或导入SSH密钥
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk0NTU3NjE2" alt="这里写图片描述"></p>
</li>
<li>
<p>3.点击Generate生成ssh密钥,需要耐心等待,据说点击进度条下方空白页面会快一点,可试试
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk0NjQwODY1" alt="这里写图片描述"></p>
</li>
<li>
<p>4.生成之后如图,红框内为公钥,这时候建议先把公钥和私钥都保存到本地路径做好备份,避免手抖关了窗口
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk0NzEzOTg3" alt="这里写图片描述"></p>
</li>
<li>
<p>5.登录GitLab,把公钥复制到GitLab里面,具体路径如图,然后把上一步窗口中的公钥复制进去,点击增加密钥按钮,便生成ssh密钥
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk0NzQxNjAw" alt="这里写图片描述"></p>
</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk0ODI3Nzg3" alt="这里写图片描述"></p>
<ul>
<li>
<p>6.找到想要拉取的项目主页,找到项目的ssh密钥链接,点击右边复制按钮
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk1MjI2OTE0" alt="这里写图片描述"></p>
</li>
<li>
<p>7.回到SourceTree主页,检查一下密钥配置,点击菜单栏工具-选项,地址指向刚才保存的私钥路径
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk1NTQxMDE5" alt="这里写图片描述"></p>
<p>如果后续有问题,可以回来禁用一下这个验证
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk1NjE5Mzgy" alt="这里写图片描述"></p>
</li>
<li>
<p>8.配置没问题了继续,点击菜单栏文件-第一个克隆/新建选项,打开一个新的Clone页面,把刚才GitLab上的ssh密钥链接复制进来,这里目标路径也要指向非空目录,ssh链接没复制错的话这里会识别出Git仓库
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk1OTQyMzAy" alt="这里写图片描述"></p>
</li>
<li>
<p>9.点击克隆,没问题就可以了,但有可能会出现如图报错,提示这个的话,直接看右下角这个奇怪的图标,这里需要从这个addKey入口重新导入一下私钥,如果刚才设置了密码就输入密码,导入之后close,这个图标还是在右下角系统托盘运行的
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MTAwMDI4MzM4" alt="这里写图片描述"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MTAwMDM5NTkw" alt="这里写图片描述"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MTAwMDU0MTM0" alt="这里写图片描述"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MTAwMTA3OTY3" alt="这里写图片描述"></p>
</li>
<li>
<p>10.然后就可以啦.....
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MTAwMzI4MjM1" alt="这里写图片描述"></p>
</li>
</ul>
<p>谢谢。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android开发之对线程池的理解]]></title>
        <id>https://zhoujingpiao.github.io/post/android-kai-fa-zhi-dui-xian-cheng-chi-de-li-jie</id>
        <link href="https://zhoujingpiao.github.io/post/android-kai-fa-zhi-dui-xian-cheng-chi-de-li-jie">
        </link>
        <updated>2016-09-22T16:00:02.000Z</updated>
        <summary type="html"><![CDATA[<ul>
<li>今天撸代码时遇到这个点，于是回头看了一遍，重新梳理了一下Android线程池的使用，为了加深理解，顺便做了一个小Demo，谈技术要联系实际需求，而且不提源码的都是耍流氓，下面从Why、What、How三个大方面谈谈我对android线程池的部分理解，水平有限，错误之处还请指出。</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<ul>
<li>今天撸代码时遇到这个点，于是回头看了一遍，重新梳理了一下Android线程池的使用，为了加深理解，顺便做了一个小Demo，谈技术要联系实际需求，而且不提源码的都是耍流氓，下面从Why、What、How三个大方面谈谈我对android线程池的部分理解，水平有限，错误之处还请指出。</li>
</ul>
<!-- more -->
<h3 id="why-为什么要用android线程池">Why | 为什么要用Android线程池</h3>
<ul>
<li>首先要从实际需求中说起：再我们在移动端（主要指手机）中执行多项任务时，因为考虑到手机cpu和内存性能有限（Android来说，就算你是821+8G+128G的小米5S写一个循环new线程小程序去运行内存也是分分钟消耗完，主要的日常程序加手机rom也接近3G了吧），这时也不能去停止线程，尤其在线程中执行一些例如联网、下载、读取数据等耗时操作时，多条线程同时运行会降低程序运行效率，造成卡顿的效果，严重影响了用户体验，因此我们在开发中需要用线程池去管理这些线程。</li>
<li>使用线程池的好处：可以避免频繁创建线程，合理利用系统资源，并且可以利用API提供的方法在线程执行中进行一些有效控制，如获取当前线程池的线程数，设定定时任务，shutdown某个进程等；</li>
</ul>
<h3 id="what-什么是android线程池">What | 什么是Android线程池</h3>
<p>An {@link ExecutorService} that executes each submitted task using one of possibly several pooled threads, normally configured using {@link Executors} factory methods.</p>
<p>Thread pools address two different problems: they usually provide improved performance when executing large numbers of asynchronous tasks, due to reduced per-task invocation overhead, and they provide a means of bounding and managing the resources,including Each {@code ThreadPoolExecutor} also maintains some basic statistics, such as the number of completed tasks.</p>
<p>—————— 我知道你不会认真看英文的分界线  So.————————</p>
<p>一个 ExecutorService，它使用可能的几个池线程之一执行每个提交的任务，通常使用 Executors 工厂方法配置。</p>
<p>线程池可以解决两个不同问题：由于减少了每个任务调用的开销，它们通常可以在执行大量异步任务时提供增强的性能，并且还可以提供绑定和管理资源（包括执行任务集时使用的线程）的方法。每个 ThreadPoolExecutor 还维护着一些基本的统计数据，如完成的任务数。</p>
<ul>
<li>
<p>以上是jdk1.5中对线程池的介绍，Android中对线程池的使用源于Java，主要是通过与线程相关的Executor接口，下面通过ThreadPoolExecutor这个Executor的实现类来对线程池进行了解。</p>
</li>
<li>
<p>ThreadPoolExecutor一共有四个构造方法，我们选参数最多的一个来分析一下：</p>
<pre><code>  public ThreadPoolExecutor(
     int corePoolSize,           //核心线程数	
     int maximumPoolSize,        //最大线程数 等于核心线程+临时线程
     long keepAliveTime,		   //临时线程等待新任务的时长
     TimeUnit unit,			   //上一参数时间单位
     BlockingQueue&lt;Runnable&gt; workQueue,	//队列缓冲区的大小
     ThreadFactory threadFactory,		 //线程处理工厂，一般用默认
     handler						   //超出线程范围和队列容量的处理策略
  	){}
</code></pre>
</li>
<li>
<p>关于线程池的执行原理，我们先讲一个故事：</p>
</li>
</ul>
<p>比如LOL中你处于ADC位置，当你带着辅助在下路，对面打野中单上单全部来对付你们，于是对方五个人都在你和辅助前面，此时的你和辅助就是核心线程数，对面五人就是你的任务量。</p>
<p>你一想不妙，二打五分分钟要被越塔强杀，于是你边喊队友边说人多欺负人少算什么，NB就一对一单挑，对面说哎哟你个青铜渣渣这么有勇气，那就来，于是对方三个人在一边等着，这时候等待的3个人就放进你设定的等待队列的任务，如果你设定等待队列数大于等于3，那么你和辅助还是按照一对一的原则打完剩下的人；</p>
<p>假如你设定等待队列数小于3，那剩下的人将由你过来的队友一对一解决，帮助你解决任务的队友，我们可以看作是临时线程。要是你和辅助加上支援的队友数量加上设定的等待队列少于对方人数5，那程序默认抛出异常，具体地说就是等于送人头了。</p>
<p>对了，在线程池中是不存在“我能反杀”这种错觉和doublekill情况的。</p>
<ul>
<li>关于线程池的处理流程：直接上图：</li>
</ul>
<p><img src="https://zhoujingpiao.github.io/post-images/1562408029408.png" alt=""></p>
<ul>
<li>图中所示是线程池处理流程（请无视灵魂画手的画风）</li>
</ul>
<h3 id="理解图中步骤">理解图中步骤：</h3>
<ol>
<li>
<p>第一步：任务进来时由核心线程去执行，此时核心线程数为5，任务数量小于5不再向下，超过5时继续向下执行；</p>
</li>
<li>
<p>第二步：多余的任务会添加到队列缓冲区中排队等候，此时假设缓冲区大小为10，那么当进来队列中的任务数小于10时将排队等待核心线程去循环执行完，当进来队列中的任务数大于10继续向下执行；</p>
</li>
<li>
<p>第三步：剩余的任务将开启临时线程去执行，代码中是根据maximumPoolSize - corePoolSize的值决定，图中假设的临时线程数量为3，那么可知最大线程数为8，当剩余的任务数小于临时线程数时，剩余任务将由临时线程执行完，否则将向下执行；</p>
</li>
<li>
<p>第四步：最终未得到执行的，被发好人卡的任务，将由代码中设定的方法处理(与handler相关)，源码中提供了四种处理方法：</p>
<pre><code> AbortPolicy			//默认处理方法，直接抛出RejectedExecutionException异常
 CallerRunsPolicy	//调用运行该任务的execute本身来执行，减缓新任务提交
 DiscardPolicy		//不想理你，直接删除
 DiscardOldestPolicy	//按先进先出顺序踢出较老的线程
</code></pre>
</li>
</ol>
<ul>
<li>还需补充的是，其中关于等待队列，API中提供三种通用策略，因为这一块还不是很熟，就不多做介绍，可参考API文档和大神们的博客，这里贴上API文档，三种策略分别为：</li>
</ul>
<p>1、直接提交。工作队列的默认选项是SynchronousQueue，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。直接提交通常要求无界maximumPoolSizes 以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</p>
<p>2、无界队列。使用无界队列（例如，不具有预定义容量的 LinkedBlockingQueue）将导致在所有 corePoolSize
线程都忙时新任务在队列中等待。这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；例如，在 Web页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</p>
<p>3、有界队列。当使用有限的 maximumPoolSizes 时，有界队列（如ArrayBlockingQueue）有助于防止资源耗尽，但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频繁阻塞（例如，如果它们是 I/O边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。</p>
<hr>
<h3 id="how-怎么使用android线程池">How | 怎么使用Android线程池</h3>
<ul>
<li>
<p>下面我写一个Demo来说明一下：</p>
<pre><code>  package org.doubi;

  import java.util.concurrent.Executors;
  import java.util.concurrent.LinkedBlockingDeque;
  import java.util.concurrent.RejectedExecutionHandler;
  import java.util.concurrent.ThreadPoolExecutor;
  import java.util.concurrent.ThreadPoolExecutor.AbortPolicy;
  import java.util.concurrent.TimeUnit;
  
  /**
   * @author piao
   *	演示线程池原理
   */
  public class Demo1 {
  	//定义参数
  	private static final RejectedExecutionHandler defaultHandler = new AbortPolicy();
  	// 测试线程池
  	public static void main(String[] args) {
  		
  		//int corePoolSize 		核心线程数
  		// int maximumPoolSize	最大线程数 等于图中的核心线程数 + 临时工线程数 
  		// long keepAliveTime	临时线程的存活时间 
  		// TimeUnit unit		时间单位 = 秒（可知上一参数单位为秒）
  		// BlockingQueue&lt;Runnable&gt; workQueue	队列缓冲区的大小 
  		// ThreadFactory threadFactory			线程处理工厂，一般用默认
  		// handler								任务处理策略
  		ThreadPoolExecutor executor = new ThreadPoolExecutor(5, 8, 1,
  				TimeUnit.SECONDS, new LinkedBlockingDeque(3),
  				Executors.defaultThreadFactory(),defaultHandler);
  		for (int i = 0; i &lt; 6; i++) {
  			executor.execute(new Runnable() {
  				@Override
  				public void run() {
  					System.out.println(Thread.currentThread().getName());
  					try {
  						//方便查看测试结果
  						Thread.sleep(2000);
  					} catch (InterruptedException e) {
  						e.printStackTrace();
  					}
  				}
  			});
  		}
  	}
  }
</code></pre>
</li>
<li>
<p>此时共6个任务，大于核心线程数小于最大线程数，由核心线程去执行，队列中有一个再等待执行，执行结果为：</p>
</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIyMjMyMDAwODYx" alt="这里写图片描述"></p>
<ul>
<li>
<p>更改一下参数：设定 i &lt;  10 ，此时共10个任务，核心线程为5，等待队列为3，因此需要启动两个临时线程去执行，结果如下：
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIyMjMyODEzMjc4" alt="这里写图片描述"></p>
</li>
<li>
<p>再次更改参数：设定 i &lt;  12，此时共10个任务，核心线程为5，等待队列为3，临时线程最大为3，因此有一个线程将被发好人卡，拒绝执行，安装配置的处理方法抛出异常，结果如下：</p>
</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIyMjMyODI3NTUx" alt="这里写图片描述"></p>
<ul>
<li>至此，线程池的原理和基本执行流程就说完了，下面介绍一下Android中常用的四种线程池：</li>
</ul>
<h3 id="四种常用线程池">四种常用线程池</h3>
<ul>
<li>
<p>1、固定大小线程池：FixThreadPool</p>
<pre><code>   public static ExecutorService newFixedThreadPool(int nThreads) {
          return new ThreadPoolExecutor(nThreads, nThreads,
                                        0L, TimeUnit.MILLISECONDS,
                                        new LinkedBlockingQueue&lt;Runnable&gt;());
      }
</code></pre>
</li>
<li>
<p>2、单个后台进程线程池：SingleThreadPool</p>
<pre><code>  public static ExecutorService newSingleThreadExecutor() {
          return new FinalizableDelegatedExecutorService
              (new ThreadPoolExecutor(1, 1,
                                      0L, TimeUnit.MILLISECONDS,
                                      new LinkedBlockingQueue&lt;Runnable&gt;()));
      }
</code></pre>
</li>
<li>
<p>3、无界线程池，可以进行自动线程回收的线程池：CachedThreadPool</p>
<pre><code>    public static ExecutorService newCachedThreadPool() {
          return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                        60L, TimeUnit.SECONDS,
                                        new SynchronousQueue&lt;Runnable&gt;());
      }
</code></pre>
</li>
<li>
<p>4、执行定时任务以及有固定周期的重复任务：ScheduledThreadPool</p>
<pre><code>   public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {
          return new ScheduledThreadPoolExecutor(corePoolSize);
      }
</code></pre>
</li>
</ul>
<ul>
<li>关于对队列的通用策略和四种常用线程池的理解，可以参考：
http://blog.csdn.net/u012702547/article/details/52259529</li>
</ul>
<ul>
<li>以上便是我对线程池的理解，经验有限，不足地方还请指教。另外具体到Android中的使用，还需要去了解AsyncTask类。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java开发环境配置]]></title>
        <id>https://zhoujingpiao.github.io/post/java-kai-fa-huan-jing-pei-zhi</id>
        <link href="https://zhoujingpiao.github.io/post/java-kai-fa-huan-jing-pei-zhi">
        </link>
        <updated>2015-08-12T14:52:54.000Z</updated>
        <summary type="html"><![CDATA[<ul>
<li>7月29号下载完整版镜像更新了win10的64位专业版，原本已经空着一个盘准备装双系统，无奈安装过程中忽视了路径选择，直接覆盖了原来的系统。</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<ul>
<li>7月29号下载完整版镜像更新了win10的64位专业版，原本已经空着一个盘准备装双系统，无奈安装过程中忽视了路径选择，直接覆盖了原来的系统。</li>
</ul>
<!-- more -->
<ul>
<li>
<p>像小孩子收到新玩具一样，一开始很惊喜，虽然安装使用过程中没有错误，没能遇到微软的诗句。上手的体验感还是特别好的，但用多了，暂时感觉win10最突出的几个点，目前的完善程度和使用场景都不是很理想，就如微软小娜和多任务桌面这两个功能，第一次用感觉高大上，但是小娜不知道是我设置问题还是目前的优化，对于语音音量和搜索点的结果都还是不习惯于我，而且感觉对于win7的成熟度来说，虽然系统兼容性已经不错，win10目前还是不适合用来做开发，我觉得一个好的开发环境，稳定性和安全性是要大于新鲜感的。作为深度强迫症患者，仅仅是桌面的任务栏没有win7的透明感就让我十分压抑，刚好今天遇到adt出毛病，genymotion也貌似暂时不支持？因此果断重装win7，别问我为什么不滚回去，因为前几天手贱......有强迫症的小孩子，有了新玩具是不会想着让旧玩具占据太大的空间的。</p>
</li>
<li>
<p>趁着安装系统的劲，再次感受一年多以前安装开发环境的过程，只是回不到当初的欣喜感了，抒情至此，上干货（基于win7平台）。</p>
</li>
<li>
<p>因为Android开发也是基于Java语言的，所以这也是安装Android开发环境的前提，先安装Java开发环境:</p>
</li>
</ul>
<h3 id="1-下载jdk-java-development-kit">1. 下载JDK （Java Development Kit）</h3>
<p>下载地址：http://www.oracle.com/index.html    /   Downloads  /  Java For Develop  /  
自选版本，推荐1.6及其以上，尽量不要下载太旧的，支持的特性太少。</p>
<h3 id="2安装jdk以及里面自带的jre">2.安装JDK，以及里面自带的jre</h3>
<p>注意事项：</p>
<ul>
<li>
<p>2.1  两者不能安装在同一个文件夹下；</p>
</li>
<li>
<p>2.2  安装路径不能有中文或者空格，最好只有英文和数字下划线；</p>
</li>
<li>
<p>2.3  安装版本应根据系统的32位或者64位来安装，android下载的sdk版本也是如此；</p>
</li>
<li>
<p>2.4 安装图示略过，注意不要放在系统盘下就好；</p>
</li>
</ul>
<h3 id="3-配置path环境变量">3.  配置path环境变量</h3>
<p>依次点开电脑 - 属性 - 高级系统设置（高级）  - 环境变量</p>
<p><img src="https://zhoujingpiao.github.io/post-images/1562407228954.png" alt=""></p>
<ul>
<li>3.1 创建一个JAVA_HOME的变量(指代JDK安装路径)：E:\jdk1.7.0_45</li>
</ul>
<p><img src="https://zhoujingpiao.github.io/post-images/1562407287922.png" alt=""></p>
<ul>
<li>3.2  在path路径前添加：%JAVA_HOME%/bin;</li>
</ul>
<p><img src="https://zhoujingpiao.github.io/post-images/1562407302646.png" alt=""></p>
<p>注意事项：</p>
<ul>
<li>
<p>3.2.1 Path环境意义：要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到path中指定的路径 去找。用户通过设置环境变量，来更好的运行进程；</p>
</li>
<li>
<p>3.2.2 一般习惯上放前面，英文标点不要写错，最好直接复制过去；</p>
</li>
<li>
<p>3.2.3 以后需要更换JDK的目录时，只需要更换JAVA_HOME的目录即可，这是前面配置JAVA_HOME意义，Path环境变量改动会对系统有影响，所以建议提前备份一个txt文档保存环境变量值；</p>
</li>
<li>
<p>3.3  配置CLASSPATH变量：.;%JAVA_HOME%\lib\tools.jar</p>
</li>
</ul>
<p><img src="https://zhoujingpiao.github.io/post-images/1562407332458.png" alt=""></p>
<p>此处表示用于编译时JAVA类的路径，注意这里设置的是两个值，(.;)表示的是JVM先搜索当前目录。                  其值为：.;%JAVA_HOME%\lib\tools.jar。</p>
<h3 id="4-验证环境配置是否正确输入内容不区分大小写">4. 验证环境配置是否正确（输入内容不区分大小写）</h3>
<ul>
<li>依次点击开始 - 运行 （或者按快捷键windows + R）,输入cmd 打开命令行工具，依次输入java -version、javac，如果有返回内容且不是报错误信息，报错的话请重新对照安装流程对一遍，尤其是安装说明，安装出错一般需要重装，且要先卸载再重启一遍系统再重新安装。如果没报错，返回类似信息，就表示配置成功，结果如下：</li>
</ul>
<p><img src="https://zhoujingpiao.github.io/post-images/1562407352812.png" alt="">
<img src="https://zhoujingpiao.github.io/post-images/1562407357604.png" alt="">
                 
以上，则表示配置完成。</p>
]]></content>
    </entry>
</feed>