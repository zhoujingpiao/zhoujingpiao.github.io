<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhoujingpiao.github.io</id>
    <title>暮雨今汐</title>
    <updated>2019-07-06T10:30:25.527Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhoujingpiao.github.io"/>
    <link rel="self" href="https://zhoujingpiao.github.io/atom.xml"/>
    <subtitle>说什么王权富贵 / 怕什么戒律清规</subtitle>
    <logo>https://zhoujingpiao.github.io/images/avatar.png</logo>
    <icon>https://zhoujingpiao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 暮雨今汐</rights>
    <entry>
        <title type="html"><![CDATA[高德地图定位实现]]></title>
        <id>https://zhoujingpiao.github.io/post/gao-de-di-tu-ding-wei-shi-xian</id>
        <link href="https://zhoujingpiao.github.io/post/gao-de-di-tu-ding-wei-shi-xian">
        </link>
        <updated>2018-01-23T10:16:27.000Z</updated>
        <summary type="html"><![CDATA[<p>GoogleMap不存在，SouGou占有率不高，BaiDu niao性差，所以实现地图肯定首选高德啦......</p>
]]></summary>
        <content type="html"><![CDATA[<p>GoogleMap不存在，SouGou占有率不高，BaiDu niao性差，所以实现地图肯定首选高德啦......</p>
<!-- more -->
<h2 id="1创建应用">1.创建应用</h2>
<blockquote>
<p>官方文档地址: http://lbs.amap.com/api/android-location-sdk/guide/create-project/get-key</p>
</blockquote>
<ul>
<li>
<p>注册账号,创建对应的应用.</p>
</li>
<li>
<p>[外链图片转存失败(img-Lr6jBQE8-1562408859358)(https://i.imgur.com/S5xtRvc.png)]</p>
</li>
<li>
<p>这里基本就是填资料啦,没什么难的地方,只不过创建应用之后设置key的时候,要获取SHA1,</p>
</li>
<li>
<p>[外链图片转存失败(img-ljdLgIf7-1562408859360)(https://i.imgur.com/dJJVlzu.png)]</p>
</li>
<li>
<p>我的获取方法:androidstudio3.0,利用Terminal工具:</p>
</li>
<li>
<p>[外链图片转存失败(img-uemJSQFE-1562408859361)(https://i.imgur.com/OqlJWhb.png)]</p>
</li>
<li>
<p>根据签名文件分别获取debug和release的SHA1,直接贴主要命令行吧:</p>
<pre><code> D:\A_Git3\XHBC&gt;cd D:\JDK8\bin
 D:\JDK8\bin&gt;keytool -v -list -keystore C:\Users\zjp\.android\debug.keystore
 *****************  WARNING WARNING WARNING  *****************
 条目类型: PrivateKeyEntry
 证书指纹:
          MD5: 0A:02:44:CC:D2:65:A************62:ED:A3:DD:34
          SHA1: 79:BC:05:39:AA:35:CD:7************F:33:CA
          SHA256: 9E:F0:B1:1C:8B:59:C6:2A:17:A************7:FE:E7:EB:93
          签名算法名称: SHA1
          版本: 1
 *******************************************
 D:\JDK8\bin&gt;keytool -v -list -keystore D:\SIGN\x**.jks
 条目类型: PrivateKeyEntry
 证书指纹:
          MD5: 04:8E:1C:84:39:DF:78************:15:E9:F6
          SHA1: 23:64:74:64:E0:80:A************:73:10:9E:8A:3D:57:EA
          SHA256: 2A:5F:BE:E7:94:2B:DF:C************:BC:42:57:51:4D:EA
          签名算法名称: SHA256withRSA
 *******************************************
</code></pre>
</li>
</ul>
<h2 id="2-android-studio-配置工程">2 Android Studio 配置工程</h2>
<blockquote>
<p>官方文档地址: http://lbs.amap.com/api/android-location-sdk/guide/create-project/android-studio-create-project</p>
</blockquote>
<ul>
<li>
<p>这里基本照着文档走就没问题,注意问题如下:</p>
<ul>
<li>
<ol>
<li>[外链图片转存失败(img-FBJkMBqH-1562408859361)(https://i.imgur.com/VugUi5Y.png)]
此处,只是获取当前定位,比如获取当前位于哪个城市直接用定位就好,要显示地图就多下载一个2D,要添加复杂图层或者添加多个标记点等操作就要用到3D地图</li>
</ol>
</li>
<li>2.2D地图不用下载.so库,3D地图要搭配.so库,主选arm架构的,笔记市场占有率在那摆着</li>
</ul>
</li>
</ul>
<h2 id="3获取定位数据">3.获取定位数据</h2>
<blockquote>
<p>官方文档地址: http://lbs.amap.com/api/android-location-sdk/guide/android-location/getlocation</p>
</blockquote>
<h3 id="31-配置androidmainfestxml文件">3.1 配置AndroidMainfest.xml文件</h3>
<pre><code>	&lt;!-- 高德地图权限--&gt;
	&lt;!--用于进行网络定位--&gt;
	&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;&gt;&lt;/uses-permission&gt;
	&lt;!--用于访问GPS定位--&gt;
	&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;&gt;&lt;/uses-permission&gt;
	&lt;!--用于获取运营商信息，用于支持提供运营商信息相关的接口--&gt;
	&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;&gt;&lt;/uses-permission&gt;
	&lt;!--用于访问wifi网络信息，wifi信息会用于进行网络定位--&gt;
	&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;
	&lt;!--用于获取wifi的获取权限，wifi信息会用来进行网络定位--&gt;
	&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;
	&lt;!--用于访问网络，网络定位需要上网--&gt;
	&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;&gt;&lt;/uses-permission&gt;
	&lt;!--用于读取手机当前的状态--&gt;
	&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;&gt;&lt;/uses-permission&gt;
	&lt;!--用于写入缓存数据到扩展存储卡--&gt;
	&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&gt;&lt;/uses-permission&gt;
	&lt;!--用于申请调用A-GPS模块--&gt;
	&lt;uses-permission android:name=&quot;android.permission.ACCESS_LOCATION_EXTRA_COMMANDS&quot;&gt;&lt;/uses-permission&gt;
	&lt;!--用于申请获取蓝牙信息进行室内定位--&gt;
	&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;&gt;&lt;/uses-permission&gt;
	&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot;&gt;&lt;/uses-permission&gt;
	
	&lt;application
	        android:icon=&quot;@mipmap/ic_launcher&quot;
	        android:label=&quot;@string/app_name&quot;
	        android:theme=&quot;@style/AppTheme&quot;&gt;
	        &lt;!--设置key--&gt;
	        &lt;meta-data
	            android:name=&quot;com.amap.api.v2.apikey&quot;
	            android:value=&quot;这里填写第一步你申请的那个key&quot; /&gt;
	        &lt;!--声明定位service--&gt;
	        &lt;service android:name=&quot;com.amap.api.location.APSService&quot;&gt;&lt;/service&gt;
	&lt;/application&gt;
</code></pre>
<h3 id="31-在布局文件中添加地图显示控件">3.1 在布局文件中添加地图显示控件</h3>
<ul>
<li>此处注意2D和3D地图因为添加的jar包不同其MapView路径也是不同的,如下
<ul>
<li>
<p>2D:</p>
<pre><code>  &lt;com.amap.api.maps2d.MapView
  	android:id=&quot;@+id/map&quot;
  	android:layout_width=&quot;fill_parent&quot;
  	android:layout_height=&quot;fill_parent&quot; /&gt;		
</code></pre>
</li>
<li>
<p>3D:</p>
<pre><code>   &lt;com.amap.api.maps.MapView
          android:id=&quot;@+id/map&quot;
          android:layout_width=&quot;match_parent&quot;
          android:layout_height=&quot;match_parent&quot; /&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="33-activity里面进行注册配置">3.3 Activity里面进行注册配置</h3>
<blockquote>
<p>此处参考这篇博文,写的很详细了,如侵权请告知我立即删改,此处我在这个哥们写的基础上加上一点我自己的理解吧: https://www.jianshu.com/p/c3dc0cea0a2d</p>
</blockquote>
<pre><code>	public class MainActivity extends AppCompatActivity implements  LocationSource, AMapLocationListener {
	
	    private MapView mapView;	//地图控件
	    private AMap aMap;			//地图对象
	
	    //定位需要的声明,初始化的配置
	    private AMapLocationClient mLocationClient = null;			//发起定位
	    private AMapLocationClientOption mLocationOption = null;	//参数设置
	    private OnLocationChangedListener mListener = null;			//监听器
		
		//标识，用于判断是否只显示一次定位信息和用户重新定位
    	private boolean isFirstLoc = true;

	    @Override
	    protected void onCreate(Bundle savedInstanceState) {
	        super.onCreate(savedInstanceState);
	        setContentView(R.layout.activity_main);
	
	        mapView = (MapView) findViewById(R.id.map);
			//这句是重点,如果是自定义BaseActivity的要注意重写onCreate()方法
	        mapView.onCreate(savedInstanceState);	

	        //获取地图对象
	        aMap = mapView.getMap();
	
	        //设置显示定位按钮 并且可以点击
	        UiSettings settings = aMap.getUiSettings();
	        //设置定位监听
	        aMap.setLocationSource(this);
	        // 是否显示定位按钮
	        settings.setMyLocationButtonEnabled(true);
	        // 是否可触发定位并显示定位层
	        aMap.setMyLocationEnabled(true);
	
	        //定位的小图标
	        MyLocationStyle myLocationStyle = new MyLocationStyle();
	        myLocationStyle.myLocationIcon(BitmapDescriptorFactory.fromResource(R.mipmap.point_map));
	        myLocationStyle.radiusFillColor(android.R.color.transparent);
	        myLocationStyle.strokeColor(android.R.color.transparent);
	        aMap.setMyLocationStyle(myLocationStyle);
	
	        //开始定位
	        initLocation();
	    }
	
	    /**
		*  定位
		*/
	    private void initLocation() {
	        mLocationClient = new AMapLocationClient(getApplicationContext());
	        //设置定位回调监听
	        mLocationClient.setLocationListener(this);
	        //初始化定位参数
	        mLocationOption = new AMapLocationClientOption();
	        //设置定位模式
			//Hight_Accuracy为高精度模式，Battery_Saving为低功耗模式，Device_Sensors是仅设备模式
	        mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);
	        //设置是否返回地址信息（默认返回地址信息）
	        mLocationOption.setNeedAddress(true);
	        //设置是否只定位一次,默认为false
	        mLocationOption.setOnceLocation(false);
	        //设置是否强制刷新WIFI，默认为强制刷新
	        mLocationOption.setWifiActiveScan(true);
	        //设置是否允许模拟位置,默认为false，不允许模拟位置
	        mLocationOption.setMockEnable(false);
	        //设置定位间隔,单位毫秒,默认为2000ms
	        mLocationOption.setInterval(2000);
	        //给定位客户端对象设置定位参数
	        mLocationClient.setLocationOption(mLocationOption);
	        //启动定位
	        mLocationClient.startLocation();
	    }
	
	    //定位回调函数
	    @Override
	    public void onLocationChanged(AMapLocation amapLocation) {
	        if (amapLocation != null) {
	            if (amapLocation.getErrorCode() == 0) {
	                //定位成功回调信息，设置相关消息
	                amapLocation.getLocationType();//获取当前定位结果来源，如网络定位结果，详见官方定位类型表
	                amapLocation.getLatitude();		//获取纬度
	                amapLocation.getLongitude();	//获取经度
	                amapLocation.getAccuracy();		//获取精度信息
	                amapLocation.getCity();			//城市信息
	
	                // 如果不设置标志位，此时再拖动地图时，它会不断将地图移动到当前的位置
	                if (isFirstLoc) {
	                    //设置缩放级别
	                    aMap.moveCamera(CameraUpdateFactory.zoomTo(17));
	                    //将地图移动到定位点
	                    aMap.moveCamera(CameraUpdateFactory.changeLatLng(new LatLng(amapLocation.getLatitude(), amapLocation.getLongitude())));
	                    //点击定位按钮 能够将地图的中心移动到定位点
	                    mListener.onLocationChanged(amapLocation);
	                    //添加图钉
	                    aMap.addMarker(getMarkerOptions(amapLocation));
	                    //获取定位信息
	                    StringBuffer buffer = new StringBuffer();
	                    buffer.append(amapLocation.getCountry() + &quot;&quot; + amapLocation.getProvince() + &quot;&quot; + amapLocation.getCity() + &quot;&quot; + amapLocation.getProvince() + &quot;&quot; + amapLocation.getDistrict() + &quot;&quot; + amapLocation.getStreet() + &quot;&quot; + amapLocation.getStreetNum());
	                    Toast.makeText(getApplicationContext(), buffer.toString(), Toast.LENGTH_LONG).show();
	                    isFirstLoc = false;
	                }
	            } else {
	                //显示错误信息ErrCode是错误码，errInfo是错误信息，详见错误码表。
	                Log.e(&quot;AmapError&quot;, &quot;location Error, ErrCode:&quot;
	                        + amapLocation.getErrorCode() + &quot;, errInfo:&quot;
	                        + amapLocation.getErrorInfo());
	                Toast.makeText(getApplicationContext(), &quot;定位失败&quot;, Toast.LENGTH_LONG).show();
	            }
	        }
	    }
	
	    //自定义一个图钉，并且设置图标，当我们点击图钉时，显示设置的信息
	    private MarkerOptions getMarkerOptions(AMapLocation amapLocation) {
	         //设置图钉选项
	        MarkerOptions options = new MarkerOptions();
	        //图标
	        options.icon(BitmapDescriptorFactory.fromResource(R.mipmap.fire));
	        //位置
	        options.position(new LatLng(amapLocation.getLatitude(), amapLocation.getLongitude()));
	        StringBuffer buffer = new StringBuffer();
	        buffer.append(amapLocation.getCountry() + &quot;&quot; + amapLocation.getProvince() + &quot;&quot; + amapLocation.getCity() +  &quot;&quot; + amapLocation.getDistrict() + &quot;&quot; + amapLocation.getStreet() + &quot;&quot; + amapLocation.getStreetNum());
	        //标题
	        options.title(buffer.toString());
	        //子标题
	        options.snippet(&quot;这是我设置的标题&quot;);
	        //设置多少帧刷新一次图片资源
	        options.period(60);
	        return options;
	    }

	    @Override
	    public void activate(OnLocationChangedListener listener) {
	        mListener = listener;
	    }
	
	    @Override
	    public void deactivate() {
	        mListener = null;
	    }
	
	
	    @Override
	    protected void onResume() {
	        super.onResume();
	        mapView.onResume();
	    }
	
	    @Override
	    protected void onPause() {
	        super.onPause();
	        mapView.onPause();
	    }
	
	    @Override
	    protected void onSaveInstanceState(Bundle outState) {
	        super.onSaveInstanceState(outState);
	        mapView.onSaveInstanceState(outState);
	    }

	    @Override
	    protected void onDestroy() {
	        super.onDestroy();
	        mapView.onDestroy();
	    }
	}
</code></pre>
<h3 id="34-在真机上运行">3.4 在真机上运行</h3>
<h2 id="4总结">4.总结</h2>
<ul>
<li>其实这类第三方的,仔细一点照着文档走是没什么大问题的,也不是每家都跟某信支付的文档一样坑嘛。
遇到bug多搜一下,基本我的感觉就是第一次接的时候比较繁琐,但是自己弄好成功之后,基本理一下思路,自己心里有谱了后面就会觉得很清晰了.就是这些。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android面试总结2017版]]></title>
        <id>https://zhoujingpiao.github.io/post/android-mian-shi-zong-jie-2017-ban</id>
        <link href="https://zhoujingpiao.github.io/post/android-mian-shi-zong-jie-2017-ban">
        </link>
        <updated>2017-12-28T12:03:23.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>近期我司招聘,我去面了一些android开发的哥们,以下由近期面试总结得出的体会,以技术面试60分钟为基准,根据我去面试和面试别人的经验,我把整个面试流程大概规划为以下几个部分。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>近期我司招聘,我去面了一些android开发的哥们,以下由近期面试总结得出的体会,以技术面试60分钟为基准,根据我去面试和面试别人的经验,我把整个面试流程大概规划为以下几个部分。</p>
</blockquote>
<!-- more -->
<h3 id="1-10的时间去看自我介绍了解基本信息离职原因工作组成员情况">1. 10%的时间去看自我介绍,了解基本信息,离职原因,工作组成员情况</h3>
<blockquote>
<p>这里就是简历上的基本信息,基本上只要表达能清晰流利就可以了,噢,据小伙伴说有可能还要看一眼
是不是&quot;老乡&quot;,虽然我完全不理解这所谓的老乡关系能带来多少的安全感,离职原因的话,其实度娘一下,
这里不需要你真正的原因,但是需要一个合理的原因,这里说度娘不说谷歌,是因为我发现好大一部分人对
Google的刚需没那么大,包括装了过滤广告插件的我,更有甚者,还有一部分开发人员的第二开发工具竟然
不是谷歌浏览器.</p>
</blockquote>
<h3 id="2-15的时间去验证基本水平">2. 15%的时间去验证基本水平</h3>
<ul>
<li>1.常用工具使用,Git的使用,常用第三方库.这里基本没人会犯错,基本名字肯定能说一两个,即使不做任何面试准备.</li>
</ul>
<blockquote>
<p>比较离谱的是有一个哥们,问基础的时候感觉答的不是很好,拿出项目我问那个模块他做的,好不容易找到一个简单的页面,问实现竟然也是吞吞吐吐,于是我就很机(狡)智(猾)地问了下: 你现在用的androidStudio(第一开发工具)是什么版本的,他迟疑了一下,竟然说好久没看忘记了,我心想这TM就尴尬了,连吃饭的家伙都不了解,即使是真的这样,那最近新出了一个3.0大版本,只要近半年关注了任何一个android开发相关的公众号或者网站,必定能看到这个条信息,看了之后还是不去关注自己使用的版本的,那这职业心性基本相当于玩王者荣耀不买装备还想越塔强杀人家,分分钟回血池等复活.</p>
</blockquote>
<ul>
<li>2.基础的Java知识点,包括集合,数据类型,三大特性,多线程,网络基础tcp相关;还有android基础的一些组件,基本的控件的如fragment,listView,四大组件等等,这里虽然像我自己也压根平常没有刻意关注这些,就是有个基本印象,但是作为应聘的人,这些问题起码可以看出对面试的准备和态度.</li>
</ul>
<blockquote>
<p>我认为不管技术如何,在应聘的时候都要重新去梳理一下基础的知识结构,这里都还没有讲到算法呢,手写最简单的冒泡排序和二分查找都能过滤一大片了,然而在面向浏览器编程的阶段,纠结于这些对于实际的结果没有什么有利的影响.</p>
</blockquote>
<ul>
<li>3.态度很重要,面试并不能完全看清楚一个人的水平,我在面对技术比我厉害的人,自己也有点心虚,但是在技术能达到要求的前提下(此处在我看来标准是吹技术不过于装逼而且能不被我拆穿的情况下),招人在能满足工作要求的前提下,当然是找看的顺眼的啦.</li>
</ul>
<h3 id="3-45的时间去聊项目">3. 45%的时间去聊项目</h3>
<ul>
<li>
<p>1.以及项目中常用的技术点,不要问插件使用和第三方SDK的使用,这些看文档找博客基本能完成,前面确认了工作经历的情况之后,此处再问这些并不能体现真实的工作能力,关注的点,我认为第一个是看负责的模块的实现,去看对方的表达的思路,考虑技术实现的想法是否符合其项目履历和工作经验年限,首先是能回答出来项目的实现,然后能顺便讲讲自己在其中经历的难点和事后的思考最好了.</p>
</li>
<li>
<p>2.涉及第三方库,如网络框架,Okhttp,Retrofit,Volley,图片处理框架Glide,Picasso,ImageLoader等,首先聊使用的场景,还是聊遇到的问题,解决的办法.接下来问用的顺手的,问下里面的实现,okhttp有自己封装吗,拦截器了解过吗.到了图片框架,我一般问下用在什么地方,里面的一些源码看过没有,缓存的算法,以及横向的使用对比等等.</p>
</li>
<li>
<p>3.针对提到的项目点延伸出来相应的问题.可以联想到的.</p>
</li>
</ul>
<blockquote>
<p>比如简单的列表,ScrollView嵌套listView,这里可以问出滑动事件冲突的解决,view的绘制流程到自定义控件的实现思路,事件分发机制的处理机制以及相关使用,谈到glide加载图片,可以聊到数据量大的处理,图片0OOM问题的处理,线程池的理解和自定义相关</p>
</blockquote>
<ul>
<li>4.问一下对一些常用的库或者业务技术的了解.</li>
</ul>
<blockquote>
<p>比如微信支付流程这个问题,我每个人都问了,每个人都说做过,没有一个人能完整统筹地回答出来,这个问题说大不大,说小不小,但是即使是这样,根据自己的理解总是有人能说出大概思路的,这不需要背文档,操作过之后用心去理解一下,就能变为自己的东西了.</p>
</blockquote>
<ul>
<li>5.模拟具体的业务场景.这个可以举一些例子.</li>
</ul>
<blockquote>
<p>比如地图业务,类似摩拜单车行驶轨迹的记录怎么做,聊天业务,聊天信息为什么能实时传输,聊天记录如何保持,数据持久化方面等场景,之前有一个段子说可以拿自己目前项目中没有解决的问题拿出去给对方解决一下.</p>
<p>我之前去面试就遇到过别人问斗地主洗牌,要达成随机洗牌然后怎么发牌达到什么要求的实现思路,当时没答出来,后面想想其实这里用集合和多线程去入手就可以解决,另外一家做游戏,上来抓着多线程的问题虐的死去活来,如何实现用户多个操作同时进行,并发处理等等.</p>
</blockquote>
<ul>
<li>6.很多人秉持说多错多的原则,我觉得这里是除了技术问答的第二个可以拉开差距的地方,主动的总是比被动的好点.</li>
</ul>
<blockquote>
<p>像我撸着代码一头懵逼被拉去面试,问了技术之后,没准备好接下来问什么,我一般就假装去看简历,拿对方写的几道(我就这么百度一下的题目)看看,其实问了上面的基本接下来这块就差不多了,这时候如果对方能顺着刚才的话题再串联一下技术点我觉得会很好,不过没遇到过,可能是我司的逼格不够了.</p>
</blockquote>
<ul>
<li>6.哦,还有一个现象:写笔试题很多半个钟写不完8,9道基础题,字也是真的丑.</li>
</ul>
<h3 id="4-20时间去聊理解">4. 20%时间去聊理解</h3>
<ul>
<li>1.一个区分技术水平到哪个程度的问题:对activity的理解.activity的生命周期基本每个人都能说出来,哪个方法怎么用实现什么都大概有个一二,但能不能联系实际的业务场景,以及有自己的思考,这就是在2-5年这个阶段技术分水岭之一,我觉得这个问题可以看做是中级到高级的分水岭,中级是定义为能干活,高级是会干活.</li>
</ul>
<blockquote>
<p>有个哥们简历上.activity写了精通,我就问他对activity的理解,,,他就说几个生命周期..然后就没有然后了.
这不就相当于劝妹纸多喝热水了,这样肯定追不到妹纸的....</p>
</blockquote>
<blockquote>
<p>额.然后我引导他,我说可以想一下工作中用到的场景..然后他想了一下说好像极光推送用过onResume方法..我没用过极光推送..我想了一下,我说是不是这里可以类似考虑app应用从前台到后台再回到前台的生命周期执行,然后联想到推送服务只有放在这几个方法才能保持实现..维持服务持久之类的(此处经查询得知,正确的理解应该是广播接受者相关的(捂脸状态)).</p>
</blockquote>
<blockquote>
<p>所以面试官也经常是错的嘛,面试的基本要诀和追妹纸是一样一样的,不要怂,胆大心细脸皮厚.(此处我有一个大胆的想法~~)</p>
</blockquote>
<ul>
<li>2.这里主要考虑的就是能不能从简单介绍+业务场景+自己的思考入手,一个人说全套,类似的问题,如对http的理解,可以自己聊项目开发中跟后台交互的经验,对接口和抽象类的理解,可以谈到项目结构,谈到MVP和组件化的思路,因为我们今天做的绝大部分业务和技术,都是有人已经踩过坑了,有的只是实现时间的长短和对搜索关键字的使用了.所以能自己独立收获到才是正解.</li>
</ul>
<blockquote>
<p>&quot;我不一定要这个,但你得懂.&quot;</p>
</blockquote>
<ul>
<li>3.我的水平有限,只能举例到这个地方,至于更深刻的前沿的,我大概有几个方向,应该是大公司所考虑的,项目代码的复用性,混淆和热修复的原理,视频影音的优化,JNI的实现之类的了,</li>
</ul>
<blockquote>
<p>想想平时遇到公众号推送,看下一线互联网公司的面试题,发现一半的东西看的怀疑人生了.</p>
</blockquote>
<h3 id="5-10的时间想有没有即兴想问的和对方有问题的东西大概提一下业务的内容薪资不是自己考虑的东西只关注技术如果过关自然接下来有人来谈业务不过关的话那就可以回去等通知啦">5. 10%的时间想有没有即兴想问的和对方有问题的东西.大概提一下业务的内容,薪资不是自己考虑的东西,只关注技术,如果过关自然接下来有人来谈业务,不过关的话那就可以回去等通知啦.</h3>
<blockquote>
<p>薪资不敢开12K以上还敢写精通两个字的都是傻x</p>
</blockquote>
<hr>
<h3 id="总结">总结</h3>
<ul>
<li>
<p>1.不管去面试还是面试别人,都是一次进步的机会</p>
</li>
<li>
<p>2.找工作是实力加运气,但是加成比例也是要看运气的,多积攒人品总是没错的</p>
</li>
<li>
<p>3.搞技术要保持危机感,不进则退</p>
</li>
<li>
<p>4.好好努力,希望以后自己面试或者加薪,都能理直气壮</p>
<p>以上.</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SourceTree生成SSH密钥(拉取GitLab代码)]]></title>
        <id>https://zhoujingpiao.github.io/post/sourcetree-sheng-cheng-ssh-mi-yao-la-qu-gitlab-dai-ma</id>
        <link href="https://zhoujingpiao.github.io/post/sourcetree-sheng-cheng-ssh-mi-yao-la-qu-gitlab-dai-ma">
        </link>
        <updated>2017-12-27T02:06:56.000Z</updated>
        <summary type="html"><![CDATA[<p>SourceTree是一款第三方可视化的Git客户端。</p>
<p>安全,好用,免密码,逼格高。</p>
]]></summary>
        <content type="html"><![CDATA[<p>SourceTree是一款第三方可视化的Git客户端。</p>
<p>安全,好用,免密码,逼格高。</p>
<!-- more -->
<h3 id="1为什么">1.为什么</h3>
<p>安全,好用,免密码,逼格高</p>
<h3 id="2流程">2.流程</h3>
<ul>
<li>
<p>1.安装Git客户端,安装SourceTree客户端,我的版本分别为:Git:2.9.3,SourceTree2.3.5,注意安装最好不要带有中文路径</p>
</li>
<li>
<p>2.SourceTree客户端,点击菜单栏工具-创建或导入SSH密钥
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk0NTU3NjE2" alt="这里写图片描述"></p>
</li>
<li>
<p>3.点击Generate生成ssh密钥,需要耐心等待,据说点击进度条下方空白页面会快一点,可试试
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk0NjQwODY1" alt="这里写图片描述"></p>
</li>
<li>
<p>4.生成之后如图,红框内为公钥,这时候建议先把公钥和私钥都保存到本地路径做好备份,避免手抖关了窗口
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk0NzEzOTg3" alt="这里写图片描述"></p>
</li>
<li>
<p>5.登录GitLab,把公钥复制到GitLab里面,具体路径如图,然后把上一步窗口中的公钥复制进去,点击增加密钥按钮,便生成ssh密钥
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk0NzQxNjAw" alt="这里写图片描述"></p>
</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk0ODI3Nzg3" alt="这里写图片描述"></p>
<ul>
<li>
<p>6.找到想要拉取的项目主页,找到项目的ssh密钥链接,点击右边复制按钮
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk1MjI2OTE0" alt="这里写图片描述"></p>
</li>
<li>
<p>7.回到SourceTree主页,检查一下密钥配置,点击菜单栏工具-选项,地址指向刚才保存的私钥路径
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk1NTQxMDE5" alt="这里写图片描述"></p>
<p>如果后续有问题,可以回来禁用一下这个验证
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk1NjE5Mzgy" alt="这里写图片描述"></p>
</li>
<li>
<p>8.配置没问题了继续,点击菜单栏文件-第一个克隆/新建选项,打开一个新的Clone页面,把刚才GitLab上的ssh密钥链接复制进来,这里目标路径也要指向非空目录,ssh链接没复制错的话这里会识别出Git仓库
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MDk1OTQyMzAy" alt="这里写图片描述"></p>
</li>
<li>
<p>9.点击克隆,没问题就可以了,但有可能会出现如图报错,提示这个的话,直接看右下角这个奇怪的图标,这里需要从这个addKey入口重新导入一下私钥,如果刚才设置了密码就输入密码,导入之后close,这个图标还是在右下角系统托盘运行的
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MTAwMDI4MzM4" alt="这里写图片描述"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MTAwMDM5NTkw" alt="这里写图片描述"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MTAwMDU0MTM0" alt="这里写图片描述"></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MTAwMTA3OTY3" alt="这里写图片描述"></p>
</li>
<li>
<p>10.然后就可以啦.....
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjI3MTAwMzI4MjM1" alt="这里写图片描述"></p>
</li>
</ul>
<p>谢谢。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Android开发之对线程池的理解]]></title>
        <id>https://zhoujingpiao.github.io/post/android-kai-fa-zhi-dui-xian-cheng-chi-de-li-jie</id>
        <link href="https://zhoujingpiao.github.io/post/android-kai-fa-zhi-dui-xian-cheng-chi-de-li-jie">
        </link>
        <updated>2016-09-22T16:00:02.000Z</updated>
        <summary type="html"><![CDATA[<p>今天撸代码时遇到这个点，于是回头看了一遍，重新梳理了一下Android线程池的使用，为了加深理解，顺便做了一个小Demo，谈技术要联系实际需求，而且不提源码的都是耍流氓，下面从Why、What、How三个大方面谈谈我对android线程池的部分理解，水平有限，错误之处还请指出。</p>
]]></summary>
        <content type="html"><![CDATA[<p>今天撸代码时遇到这个点，于是回头看了一遍，重新梳理了一下Android线程池的使用，为了加深理解，顺便做了一个小Demo，谈技术要联系实际需求，而且不提源码的都是耍流氓，下面从Why、What、How三个大方面谈谈我对android线程池的部分理解，水平有限，错误之处还请指出。</p>
<!-- more -->
<h3 id="why-为什么要用android线程池">Why | 为什么要用Android线程池</h3>
<ul>
<li>首先要从实际需求中说起：再我们在移动端（主要指手机）中执行多项任务时，因为考虑到手机cpu和内存性能有限（Android来说，就算你是821+8G+128G的小米5S写一个循环new线程小程序去运行内存也是分分钟消耗完，主要的日常程序加手机rom也接近3G了吧），这时也不能去停止线程，尤其在线程中执行一些例如联网、下载、读取数据等耗时操作时，多条线程同时运行会降低程序运行效率，造成卡顿的效果，严重影响了用户体验，因此我们在开发中需要用线程池去管理这些线程。</li>
<li>使用线程池的好处：可以避免频繁创建线程，合理利用系统资源，并且可以利用API提供的方法在线程执行中进行一些有效控制，如获取当前线程池的线程数，设定定时任务，shutdown某个进程等；</li>
</ul>
<h3 id="what-什么是android线程池">What | 什么是Android线程池</h3>
<p>An {@link ExecutorService} that executes each submitted task using one of possibly several pooled threads, normally configured using {@link Executors} factory methods.</p>
<p>Thread pools address two different problems: they usually provide improved performance when executing large numbers of asynchronous tasks, due to reduced per-task invocation overhead, and they provide a means of bounding and managing the resources,including Each {@code ThreadPoolExecutor} also maintains some basic statistics, such as the number of completed tasks.</p>
<p>—————— 我知道你不会认真看英文的分界线  So.————————</p>
<p>一个 ExecutorService，它使用可能的几个池线程之一执行每个提交的任务，通常使用 Executors 工厂方法配置。</p>
<p>线程池可以解决两个不同问题：由于减少了每个任务调用的开销，它们通常可以在执行大量异步任务时提供增强的性能，并且还可以提供绑定和管理资源（包括执行任务集时使用的线程）的方法。每个 ThreadPoolExecutor 还维护着一些基本的统计数据，如完成的任务数。</p>
<ul>
<li>
<p>以上是jdk1.5中对线程池的介绍，Android中对线程池的使用源于Java，主要是通过与线程相关的Executor接口，下面通过ThreadPoolExecutor这个Executor的实现类来对线程池进行了解。</p>
</li>
<li>
<p>ThreadPoolExecutor一共有四个构造方法，我们选参数最多的一个来分析一下：</p>
<pre><code>  public ThreadPoolExecutor(
     int corePoolSize,           //核心线程数	
     int maximumPoolSize,        //最大线程数 等于核心线程+临时线程
     long keepAliveTime,		   //临时线程等待新任务的时长
     TimeUnit unit,			   //上一参数时间单位
     BlockingQueue&lt;Runnable&gt; workQueue,	//队列缓冲区的大小
     ThreadFactory threadFactory,		 //线程处理工厂，一般用默认
     handler						   //超出线程范围和队列容量的处理策略
  	){}
</code></pre>
</li>
<li>
<p>关于线程池的执行原理，我们先讲一个故事：</p>
</li>
</ul>
<p>比如LOL中你处于ADC位置，当你带着辅助在下路，对面打野中单上单全部来对付你们，于是对方五个人都在你和辅助前面，此时的你和辅助就是核心线程数，对面五人就是你的任务量。</p>
<p>你一想不妙，二打五分分钟要被越塔强杀，于是你边喊队友边说人多欺负人少算什么，NB就一对一单挑，对面说哎哟你个青铜渣渣这么有勇气，那就来，于是对方三个人在一边等着，这时候等待的3个人就放进你设定的等待队列的任务，如果你设定等待队列数大于等于3，那么你和辅助还是按照一对一的原则打完剩下的人；</p>
<p>假如你设定等待队列数小于3，那剩下的人将由你过来的队友一对一解决，帮助你解决任务的队友，我们可以看作是临时线程。要是你和辅助加上支援的队友数量加上设定的等待队列少于对方人数5，那程序默认抛出异常，具体地说就是等于送人头了。</p>
<p>对了，在线程池中是不存在“我能反杀”这种错觉和doublekill情况的。</p>
<ul>
<li>关于线程池的处理流程：直接上图：</li>
</ul>
<p><img src="https://zhoujingpiao.github.io/post-images/1562408029408.png" alt=""></p>
<ul>
<li>图中所示是线程池处理流程（请无视灵魂画手的画风）</li>
</ul>
<h3 id="理解图中步骤">理解图中步骤：</h3>
<ol>
<li>
<p>第一步：任务进来时由核心线程去执行，此时核心线程数为5，任务数量小于5不再向下，超过5时继续向下执行；</p>
</li>
<li>
<p>第二步：多余的任务会添加到队列缓冲区中排队等候，此时假设缓冲区大小为10，那么当进来队列中的任务数小于10时将排队等待核心线程去循环执行完，当进来队列中的任务数大于10继续向下执行；</p>
</li>
<li>
<p>第三步：剩余的任务将开启临时线程去执行，代码中是根据maximumPoolSize - corePoolSize的值决定，图中假设的临时线程数量为3，那么可知最大线程数为8，当剩余的任务数小于临时线程数时，剩余任务将由临时线程执行完，否则将向下执行；</p>
</li>
<li>
<p>第四步：最终未得到执行的，被发好人卡的任务，将由代码中设定的方法处理(与handler相关)，源码中提供了四种处理方法：</p>
<pre><code> AbortPolicy			//默认处理方法，直接抛出RejectedExecutionException异常
 CallerRunsPolicy	//调用运行该任务的execute本身来执行，减缓新任务提交
 DiscardPolicy		//不想理你，直接删除
 DiscardOldestPolicy	//按先进先出顺序踢出较老的线程
</code></pre>
</li>
</ol>
<ul>
<li>还需补充的是，其中关于等待队列，API中提供三种通用策略，因为这一块还不是很熟，就不多做介绍，可参考API文档和大神们的博客，这里贴上API文档，三种策略分别为：</li>
</ul>
<p>1、直接提交。工作队列的默认选项是SynchronousQueue，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。直接提交通常要求无界maximumPoolSizes 以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</p>
<p>2、无界队列。使用无界队列（例如，不具有预定义容量的 LinkedBlockingQueue）将导致在所有 corePoolSize
线程都忙时新任务在队列中等待。这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；例如，在 Web页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</p>
<p>3、有界队列。当使用有限的 maximumPoolSizes 时，有界队列（如ArrayBlockingQueue）有助于防止资源耗尽，但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频繁阻塞（例如，如果它们是 I/O边界），则系统可能为超过您许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。</p>
<hr>
<h3 id="how-怎么使用android线程池">How | 怎么使用Android线程池</h3>
<ul>
<li>
<p>下面我写一个Demo来说明一下：</p>
<pre><code>  package org.doubi;

  import java.util.concurrent.Executors;
  import java.util.concurrent.LinkedBlockingDeque;
  import java.util.concurrent.RejectedExecutionHandler;
  import java.util.concurrent.ThreadPoolExecutor;
  import java.util.concurrent.ThreadPoolExecutor.AbortPolicy;
  import java.util.concurrent.TimeUnit;
  
  /**
   * @author piao
   *	演示线程池原理
   */
  public class Demo1 {
  	//定义参数
  	private static final RejectedExecutionHandler defaultHandler = new AbortPolicy();
  	// 测试线程池
  	public static void main(String[] args) {
  		
  		//int corePoolSize 		核心线程数
  		// int maximumPoolSize	最大线程数 等于图中的核心线程数 + 临时工线程数 
  		// long keepAliveTime	临时线程的存活时间 
  		// TimeUnit unit		时间单位 = 秒（可知上一参数单位为秒）
  		// BlockingQueue&lt;Runnable&gt; workQueue	队列缓冲区的大小 
  		// ThreadFactory threadFactory			线程处理工厂，一般用默认
  		// handler								任务处理策略
  		ThreadPoolExecutor executor = new ThreadPoolExecutor(5, 8, 1,
  				TimeUnit.SECONDS, new LinkedBlockingDeque(3),
  				Executors.defaultThreadFactory(),defaultHandler);
  		for (int i = 0; i &lt; 6; i++) {
  			executor.execute(new Runnable() {
  				@Override
  				public void run() {
  					System.out.println(Thread.currentThread().getName());
  					try {
  						//方便查看测试结果
  						Thread.sleep(2000);
  					} catch (InterruptedException e) {
  						e.printStackTrace();
  					}
  				}
  			});
  		}
  	}
  }
</code></pre>
</li>
<li>
<p>此时共6个任务，大于核心线程数小于最大线程数，由核心线程去执行，队列中有一个再等待执行，执行结果为：</p>
</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIyMjMyMDAwODYx" alt="这里写图片描述"></p>
<ul>
<li>
<p>更改一下参数：设定 i &lt;  10 ，此时共10个任务，核心线程为5，等待队列为3，因此需要启动两个临时线程去执行，结果如下：
<img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIyMjMyODEzMjc4" alt="这里写图片描述"></p>
</li>
<li>
<p>再次更改参数：设定 i &lt;  12，此时共10个任务，核心线程为5，等待队列为3，临时线程最大为3，因此有一个线程将被发好人卡，拒绝执行，安装配置的处理方法抛出异常，结果如下：</p>
</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTIyMjMyODI3NTUx" alt="这里写图片描述"></p>
<ul>
<li>至此，线程池的原理和基本执行流程就说完了，下面介绍一下Android中常用的四种线程池：</li>
</ul>
<h3 id="四种常用线程池">四种常用线程池</h3>
<ul>
<li>
<p>1、固定大小线程池：FixThreadPool</p>
<pre><code>   public static ExecutorService newFixedThreadPool(int nThreads) {
          return new ThreadPoolExecutor(nThreads, nThreads,
                                        0L, TimeUnit.MILLISECONDS,
                                        new LinkedBlockingQueue&lt;Runnable&gt;());
      }
</code></pre>
</li>
<li>
<p>2、单个后台进程线程池：SingleThreadPool</p>
<pre><code>  public static ExecutorService newSingleThreadExecutor() {
          return new FinalizableDelegatedExecutorService
              (new ThreadPoolExecutor(1, 1,
                                      0L, TimeUnit.MILLISECONDS,
                                      new LinkedBlockingQueue&lt;Runnable&gt;()));
      }
</code></pre>
</li>
<li>
<p>3、无界线程池，可以进行自动线程回收的线程池：CachedThreadPool</p>
<pre><code>    public static ExecutorService newCachedThreadPool() {
          return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                        60L, TimeUnit.SECONDS,
                                        new SynchronousQueue&lt;Runnable&gt;());
      }
</code></pre>
</li>
<li>
<p>4、执行定时任务以及有固定周期的重复任务：ScheduledThreadPool</p>
<pre><code>   public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {
          return new ScheduledThreadPoolExecutor(corePoolSize);
      }
</code></pre>
</li>
</ul>
<ul>
<li>关于对队列的通用策略和四种常用线程池的理解，可以参考：
http://blog.csdn.net/u012702547/article/details/52259529</li>
</ul>
<ul>
<li>以上便是我对线程池的理解，经验有限，不足地方还请指教。另外具体到Android中的使用，还需要去了解AsyncTask类。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java开发环境配置]]></title>
        <id>https://zhoujingpiao.github.io/post/java-kai-fa-huan-jing-pei-zhi</id>
        <link href="https://zhoujingpiao.github.io/post/java-kai-fa-huan-jing-pei-zhi">
        </link>
        <updated>2015-08-12T14:52:54.000Z</updated>
        <summary type="html"><![CDATA[<p>7月29号下载完整版镜像更新了win10的64位专业版，原本已经空着一个盘准备装双系统，无奈安装过程中忽视了路径选择，直接覆盖了原来的系统。</p>
]]></summary>
        <content type="html"><![CDATA[<p>7月29号下载完整版镜像更新了win10的64位专业版，原本已经空着一个盘准备装双系统，无奈安装过程中忽视了路径选择，直接覆盖了原来的系统。</p>
<!-- more -->
<ul>
<li>
<p>像小孩子收到新玩具一样，一开始很惊喜，虽然安装使用过程中没有错误，没能遇到微软的诗句。上手的体验感还是特别好的，但用多了，暂时感觉win10最突出的几个点，目前的完善程度和使用场景都不是很理想，就如微软小娜和多任务桌面这两个功能，第一次用感觉高大上，但是小娜不知道是我设置问题还是目前的优化，对于语音音量和搜索点的结果都还是不习惯于我，而且感觉对于win7的成熟度来说，虽然系统兼容性已经不错，win10目前还是不适合用来做开发，我觉得一个好的开发环境，稳定性和安全性是要大于新鲜感的。作为深度强迫症患者，仅仅是桌面的任务栏没有win7的透明感就让我十分压抑，刚好今天遇到adt出毛病，genymotion也貌似暂时不支持？因此果断重装win7，别问我为什么不滚回去，因为前几天手贱......有强迫症的小孩子，有了新玩具是不会想着让旧玩具占据太大的空间的。</p>
</li>
<li>
<p>趁着安装系统的劲，再次感受一年多以前安装开发环境的过程，只是回不到当初的欣喜感了，抒情至此，上干货（基于win7平台）。</p>
</li>
<li>
<p>因为Android开发也是基于Java语言的，所以这也是安装Android开发环境的前提，先安装Java开发环境:</p>
</li>
</ul>
<h3 id="1-下载jdk-java-development-kit">1. 下载JDK （Java Development Kit）</h3>
<p>下载地址：http://www.oracle.com/index.html    /   Downloads  /  Java For Develop  /  
自选版本，推荐1.6及其以上，尽量不要下载太旧的，支持的特性太少。</p>
<h3 id="2安装jdk以及里面自带的jre">2.安装JDK，以及里面自带的jre</h3>
<p>注意事项：</p>
<ul>
<li>
<p>2.1  两者不能安装在同一个文件夹下；</p>
</li>
<li>
<p>2.2  安装路径不能有中文或者空格，最好只有英文和数字下划线；</p>
</li>
<li>
<p>2.3  安装版本应根据系统的32位或者64位来安装，android下载的sdk版本也是如此；</p>
</li>
<li>
<p>2.4 安装图示略过，注意不要放在系统盘下就好；</p>
</li>
</ul>
<h3 id="3-配置path环境变量">3.  配置path环境变量</h3>
<p>依次点开电脑 - 属性 - 高级系统设置（高级）  - 环境变量</p>
<p><img src="https://zhoujingpiao.github.io/post-images/1562407228954.png" alt=""></p>
<ul>
<li>3.1 创建一个JAVA_HOME的变量(指代JDK安装路径)：E:\jdk1.7.0_45</li>
</ul>
<p><img src="https://zhoujingpiao.github.io/post-images/1562407287922.png" alt=""></p>
<ul>
<li>3.2  在path路径前添加：%JAVA_HOME%/bin;</li>
</ul>
<p><img src="https://zhoujingpiao.github.io/post-images/1562407302646.png" alt=""></p>
<p>注意事项：</p>
<ul>
<li>
<p>3.2.1 Path环境意义：要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到path中指定的路径 去找。用户通过设置环境变量，来更好的运行进程；</p>
</li>
<li>
<p>3.2.2 一般习惯上放前面，英文标点不要写错，最好直接复制过去；</p>
</li>
<li>
<p>3.2.3 以后需要更换JDK的目录时，只需要更换JAVA_HOME的目录即可，这是前面配置JAVA_HOME意义，Path环境变量改动会对系统有影响，所以建议提前备份一个txt文档保存环境变量值；</p>
</li>
<li>
<p>3.3  配置CLASSPATH变量：.;%JAVA_HOME%\lib\tools.jar</p>
</li>
</ul>
<p><img src="https://zhoujingpiao.github.io/post-images/1562407332458.png" alt=""></p>
<p>此处表示用于编译时JAVA类的路径，注意这里设置的是两个值，(.;)表示的是JVM先搜索当前目录。                  其值为：.;%JAVA_HOME%\lib\tools.jar。</p>
<h3 id="4-验证环境配置是否正确输入内容不区分大小写">4. 验证环境配置是否正确（输入内容不区分大小写）</h3>
<ul>
<li>依次点击开始 - 运行 （或者按快捷键windows + R）,输入cmd 打开命令行工具，依次输入java -version、javac，如果有返回内容且不是报错误信息，报错的话请重新对照安装流程对一遍，尤其是安装说明，安装出错一般需要重装，且要先卸载再重启一遍系统再重新安装。如果没报错，返回类似信息，就表示配置成功，结果如下：</li>
</ul>
<p><img src="https://zhoujingpiao.github.io/post-images/1562407352812.png" alt="">
<img src="https://zhoujingpiao.github.io/post-images/1562407357604.png" alt="">
                 
以上，则表示配置完成。</p>
]]></content>
    </entry>
</feed>